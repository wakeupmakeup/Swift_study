//다른 언어에서도 나오는 기본적인 연산자는 모두 스킵!
// 다만 % 와같은 나머지 연산자에서 정수 형태로만 가능했던 기존의 여러 언어와는 달리 스위프트에선 부동소수점 타입도 가능하다.

let number: Double = 2.0
var result: Double = number.truncatingRemainder(dividingBy: 1.5) // 0.5
result = 12.truncatingRemainder(dividingBy: 2.5) // 2.0


// 비교 연산자도 비슷비슷하다
// 다만 참조 비교가 있는데 이는
/// A === B
// 이런식으로 쓰인다. -> A와 B가 참조 타입일때 같은 인스턴스를 가리키는지 비교해서 불리언값을 알려준다. 어떨때 쓰이는 지는 나중에 자세하게 나온다.

// 범위 연산자.
// 범위 연산자는 파이썬과 비슷하다.
// 반복문때 범위연산자를 같이 다룰 것이다.

// 부울 연산자.
/* Not, AND< OR 연산자가 있다. 차례대로 !B, A && B, A || B 이런식으로 표현한다.
 
 비트 연산자.
 NOT, AND, OR, XOR 그리고 비트이동 연산자가 있고 차례대로 아래와 같이 표현한다.
 ~A
 A & B
 A | B
 A ^ B
 A >> B
 A << B  -> 시프트 연산자는 지정하는 수만큼 피연산자를 왼쪽 혹은 오른쪽으로 이동시킨다.
 
 오버플로 연산자.
 기존 프로그래밍 언어에서는 오버플로 가능성이 있는 연산에 대해선 따로 알고리즘이나 로직등을 설계하는 것이 일반적이었다. 스위프트는 시본 연산자를 통해서 오버플로에 대비 할 수 있도록 설계되었다. 방법은 아래와 같다.
  - 오버플로 더하기 연산 : &+
  - 빼기 연산 : &-
  - 곱하기 연산 : &*
 */

var UnsignedInteger: UInt8 = 0
let errorOverflowResult: UInt8 = UnsignedInteger - 1 //UInt는 음수 값을 출력 할 수 없다.
let UnsignedInteger: UInt8 = UnsignedInteger &- 1 // 이러면 255로 오버플로 계산을 자동으로 해준다. UInt8의 최댓값이 255이고 0에서 -1 만큼 하였으니 다시 255로 간것이다. 반대로 255를 초과한다면 &+으로 하면 해결된다.




